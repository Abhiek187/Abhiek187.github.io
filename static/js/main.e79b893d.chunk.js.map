{"version":3,"sources":["About.js","Projects.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["About","document","getElementsByTagName","textContent","react_default","a","createElement","className","src","alt","Component","Projects","projects","JSON","parse","stringify","projectData","map","project","key","id","name","image","about","technology","join","website","href","target","rel","repo","Contact","App","Route","exact","path","render","src_About","src_Projects","src_Contact","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e79b893d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n\trender() {\n    const bio = \"Abhishek Chaudhuri is a college student from North Brunswick, New Jersey. He studies\" +\n      \" at Rutgers University-New Brunswick, majors in Computer Engineering, and minors in Computer\" +\n      \" Science. He excels in subjects like math and science and has a strong penchant for\" +\n      \" programming and technology. Some of his hobbies include doing taekwondo, playing the flute &\" +\n      \" piccolo, and playing video games. His ultimate goal in life is to help make society better\" +\n      \" for everyone. He can put his technical skills to good use by gaining experience from working\" +\n      \" with other companies who value his ambitions.\";\n    document.getElementsByTagName('title')[0].textContent = 'Abhishek Chaudhuri - About';\n\n\t\treturn (\n      <main className=\"about\">\n        <h3 className=\"about-heading\">About</h3>\n        <img className=\"about-headshot\" src=\"/img/IMG_0987.JPG\" alt=\"Headshot of Abhishek\"/>\n        <p className=\"about-bio\">{bio}</p>\n      </main>\n\t\t);\n\t}\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport projectData from './projects.json';\n\nclass Projects extends Component {\n\trender() {\n    const projects = JSON.parse(JSON.stringify(projectData));\n    document.getElementsByTagName('title')[0].textContent = 'Abhishek Chaudhuri - Projects';\n\n\t\treturn (\n      <main className=\"projects\">\n\t\t\t  <h3 className=\"projects-heading\">Projects</h3>\n        <ul className=\"projects-list\">\n          {projects.map(project => (\n            <li key={project.id}>\n              <h4 className=\"projects-name\">{project.name}</h4>\n              <img className=\"projects-image\" src={project.image} alt={project.name}/>\n              <p className=\"projects-about\">{project.about}</p>\n              <p className=\"projects-technology\">Made Using: {project.technology.join(', ')}</p>\n              {project.website ? (\n                <a className=\"projects-website\" href={project.website} target=\"_blank\"\n                rel=\"noopener noreferrer\">View Project</a>\n              ) : (\n                <p className=\"projects-website\">&darr; See GitHub link below &darr;</p>\n              )}\n              <a className=\"projects-repo\" href={project.repo} target=\"_blank\"\n                rel=\"noopener noreferrer\">View on GitHub</a>\n            </li>\n          ))}\n        </ul>\n      </main>\n\t\t);\n\t}\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n\trender() {\n    document.getElementsByTagName('title')[0].textContent = 'Abhishek Chaudhuri - Contact';\n\n\t\treturn (\n\t\t\t<main className=\"contact\">\n        <h3 className=\"contact-heading\">Contact</h3>\n        <a className=\"contact-resume\"\n          href=\"https://www.dropbox.com/s/05i2g7mmehfck9u/Resume%20v2.pdf?dl=0\" target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          <i className=\"fas fa-file-pdf\"/> Resume\n        </a>\n        <a className=\"contact-linkedin\" href=\"https://www.linkedin.com/in/abhiek187\"\n          target=\"_blank\" rel=\"noopener noreferrer\">\n          <i className=\"fab fa-linkedin-in\"/> LinkedIn\n        </a>\n        <a className=\"contact-github\" href=\"https://github.com/abhiek187\"\n          target=\"_blank\" rel=\"noopener noreferrer\">\n          <i className=\"fab fa-github\"/> GitHub\n        </a>\n        <a className=\"contact-email\" href=\"mailto:achaudhuri2011@yahoo.com\"\n          target=\"_top\">\n          <i className=\"fas fa-envelope\"/> Email\n        </a>\n      </main>\n\t\t);\n\t}\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport About from './About';\nimport Projects from './Projects';\nimport Contact from './Contact';\n\nclass App extends Component {\n  render() {\n    document.getElementsByTagName('title')[0].textContent = 'Abhishek Chaudhuri - Home';\n\n    return (\n      <div className=\"App\">\n        <header className=\"heading\">\n          <h1 className=\"heading-name\">Abhishek Chaudhuri</h1>\n          <h2 className=\"heading-headline\">\n            Computer Engineering & Science Student at Rutgers University - New Brunswick\n          </h2>\n        </header>\n        <nav className=\"links\">\n          <a className=\"links-about\" href=\"/about\">About</a>\n          <a className=\"links-projects\" href=\"/projects\">Projects</a>\n          <a className=\"links-contact\" href=\"/contact\">Contact</a>\n        </nav>\n        <hr/>\n        <Route exact path=\"/\" render={() => (\n          <main className=\"home\">\n            <p className=\"home-info\">\n              Hello and welcome to my website! Please click the links above for more info about me.\n            </p>\n          </main>\n        )}/>\n        <Route path=\"/about\" render={() => (\n          <About/>\n        )}/>\n        <Route path=\"/projects\" render={() => (\n          <Projects/>\n        )}/>\n        <Route path=\"/contact\" render={() => (\n          <Contact/>\n        )}/>\n        <hr/>\n        <footer className=\"foot\">\n          <span className=\"foot-left\">\n            Made using <a className=\"foot-react\" href=\"https://reactjs.org/\" target=\"_blank\"\n              rel=\"noopener noreferrer\">React</a>\n            <img className=\"foot-react-img\" src=\"/img/logo.svg\" alt=\"React logo (an atom)\"/>\n          </span>\n          <span className=\"foot-right\">\n            <a className=\"foot-mit\" target=\"_blank\" rel=\"noopener noreferrer\"\n              href=\"https://github.com/Abhiek187/abhiek187.github.io/blob/master/LICENSE\">\n              MIT License</a> Copyright (c) 2019 Abhishek Chaudhuri\n          </span>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<BrowserRouter><App /></BrowserRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}