{"version":3,"sources":["About.js","Projects.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["About","onClickLink","useEffect","document","querySelector","textContent","classList","add","remove","className","tabIndex","src","alt","Link","to","aria-label","onClick","Projects","colors","JSON","parse","stringify","colorData","projects","projectData","map","project","name","image","about","technology","tech","website","href","target","rel","repo","id","Contact","withRouter","match","location","history","useState","slideDirection","setSlideDirection","window","pathname","navbar","navPosition","offsetTop","onscroll","pageYOffset","setSlider","dest","timeout","enter","exit","classNames","Switch","Route","exact","path","process","render","key","Boolean","hostname","ReactDOM","BrowserRouter","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6df5b282.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst About = ({ onClickLink }) => {\r\n  useEffect(() => {\r\n    document.querySelector('title').textContent = 'Abhishek Chaudhuri - About';\r\n    document.querySelector('.links-about').classList.add('selected');\r\n    document.querySelector('.links-projects').classList.remove('selected');\r\n    document.querySelector('.links-contact').classList.remove('selected');\r\n  }, []);\r\n\r\n  const bio = 'Abhishek Chaudhuri is a college student from North Brunswick, New Jersey. He studies' +\r\n    ' at Rutgers University-New Brunswick, majors in Computer Engineering, and minors in Computer' +\r\n    ' Science. He excels in subjects like math and science and has a strong penchant for' +\r\n    ' programming and technology. Some of his hobbies include doing taekwondo, playing the flute &' +\r\n    ' piccolo, and playing video games. His ultimate goal in life is to help make society better' +\r\n    ' for everyone. He can put his technical skills to good use by gaining experience from working' +\r\n    ' with other companies who value his ambitions.';\r\n\r\n  return (\r\n    <main className=\"about container-fluid\">\r\n      <div className=\"about-wrapper\">\r\n        <h3 className=\"about-heading\" tabIndex={0}>About</h3>\r\n        <div className=\"about-container\">\r\n          <img className=\"about-headshot\" tabIndex={0}\r\n            src=\"/img/Headshot.png\" alt=\"Headshot of Abhishek\"/>\r\n          <p className=\"about-bio\" tabIndex={0}>{bio}</p>\r\n        </div>\r\n      </div>\r\n      <Link className=\"arrow-right\" to=\"/projects\" aria-label=\"Go to Projects\"\r\n        onClick={() => onClickLink('projects')}>\r\n        <i className=\"fas fa-arrow-right\"/>\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nAbout.propTypes = {\r\n  onClickLink: PropTypes.func.isRequired\r\n};\r\n\r\nexport default About;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport colorData from './colors.json';\r\nimport projectData from './projects.json';\r\n\r\nconst Projects = ({ onClickLink }) => {\r\n  useEffect(() => {\r\n    document.querySelector('title').textContent = 'Abhishek Chaudhuri - Projects';\r\n    document.querySelector('.links-about').classList.remove('selected');\r\n    document.querySelector('.links-projects').classList.add('selected');\r\n    document.querySelector('.links-contact').classList.remove('selected');\r\n  }, []);\r\n\r\n  // Extract JSON data as an array\r\n  const colors = JSON.parse(JSON.stringify(colorData));\r\n  const projects = JSON.parse(JSON.stringify(projectData));\r\n\r\n  return (\r\n    <main className=\"projects container-fluid\">\r\n      <Link className=\"arrow-left\" to=\"/about\" aria-label=\"Go to About\"\r\n        onClick={() => onClickLink('about')}>\r\n        <i className=\"fas fa-arrow-left\"/>\r\n      </Link>\r\n      <div className=\"projects-wrapper\">\r\n        <h3 className=\"projects-heading\" tabIndex={0}>Projects</h3>\r\n        <ul className=\"projects-list\">\r\n          {projects.map(project => (\r\n            /* Each list item needs a key */\r\n            <li key={project.id}>\r\n              <h4 className=\"projects-name\" tabIndex={0}>{project.name}</h4>\r\n              <img className=\"projects-image\" tabIndex={0} src={project.image}\r\n                alt={project.name}/>\r\n              <p className=\"projects-about\" tabIndex={0}>{project.about}</p>\r\n              <p className=\"projects-technology-header\" tabIndex={0}\r\n                aria-label={`Made using: ${project.technology}`}>\r\n                Made Using:\r\n              </p>\r\n              {project.technology.map(tech => (\r\n                <p key={tech} className={`projects-technology badge bg-${colors[tech]}`}>{tech}</p>\r\n              ))}\r\n              {/* If no project link is directly available, follow directions on GitHub */}\r\n              {project.website ? (\r\n                <a className=\"projects-website\" href={project.website} target=\"_blank\"\r\n                  rel=\"noopener noreferrer\">View Project</a>\r\n              ) : (\r\n                <p className=\"projects-website\" tabIndex={0}>&darr; See GitHub link below &darr;</p>\r\n              )}\r\n              <a className=\"projects-repo\" href={project.repo} target=\"_blank\"\r\n                rel=\"noopener noreferrer\">View on GitHub</a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"projects-addendum\" tabIndex={0}>...And much more on GitHub!</p>\r\n      </div>\r\n      <Link className=\"arrow-right\" to=\"/contact\" aria-label=\"Go to Contact\"\r\n        onClick={() => onClickLink('contact')}>\r\n        <i className=\"fas fa-arrow-right\"/>\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nProjects.propTypes = {\r\n  onClickLink: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Projects;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Contact = ({ onClickLink }) => {\r\n  useEffect(() => {\r\n    document.querySelector('title').textContent = 'Abhishek Chaudhuri - Contact';\r\n    document.querySelector('.links-about').classList.remove('selected');\r\n    document.querySelector('.links-projects').classList.remove('selected');\r\n    document.querySelector('.links-contact').classList.add('selected');\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"contact container-fluid\">\r\n      <Link className=\"arrow-left\" to=\"/projects\" aria-label=\"Go to Projects\"\r\n        onClick={() => onClickLink('projects')}>\r\n        <i className=\"fas fa-arrow-left\"/>\r\n      </Link>\r\n      <div className=\"contact-wrapper\">\r\n        <h3 className=\"contact-heading\" tabIndex={0}>Contact</h3>\r\n        {/* Each link opens in a new tab */}\r\n        <span className=\"contact-row\">\r\n          <a className=\"contact-resume\" href=\"resume.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fas fa-file-pdf\"/> Resume\r\n          </a>\r\n          <a className=\"contact-linkedin\" href=\"https://www.linkedin.com/in/abhiek187\"\r\n            target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-linkedin-in\"/> LinkedIn\r\n          </a>\r\n          <a className=\"contact-github\" href=\"https://github.com/abhiek187\"\r\n            target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fab fa-github\"/> GitHub\r\n          </a>\r\n          {/* Opens default email program */}\r\n          <a className=\"contact-email\" href=\"mailto:achaudhuri2011@yahoo.com\"\r\n            target=\"_top\">\r\n            <i className=\"fas fa-envelope\"/> Email\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  onClickLink: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Route, Link, Switch, withRouter } from 'react-router-dom';\r\n//import SwipeableRoutes from 'react-swipeable-routes';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport './App.css';\r\nimport About from './About';\r\nimport Projects from './Projects';\r\nimport Contact from './Contact';\r\n\r\nconst App = ({ match, location, history }) => {\r\n  // Determines which direction to slide the components\r\n  const [slideDirection, setSlideDirection] = useState('left');\r\n\r\n  useEffect(() => {\r\n    // Change the title of the tab every page change\r\n    if (window.location.pathname === '/') {\r\n      document.querySelector('title').textContent = 'Abhishek Chaudhuri - Home';\r\n    } else if (window.location.pathname !== '/about' && window.location.pathname !== '/projects' &&\r\n      window.location.pathname !== '/contact' && window.location.pathname !== '/Memory-Game' &&\r\n      window.location.pathname !== '/frontend-nanodegree-arcade-game' &&\r\n      window.location.pathname !== '/Neighborhood-Map') {\r\n      document.querySelector('title').textContent = 'Abhishek Chaudhuri - Error';\r\n    }\r\n\r\n    // Check where web scroll is for sticky navbar\r\n    let navbar = document.querySelector('.links');\r\n    let navPosition = navbar.offsetTop;\r\n\r\n    window.onscroll = () => {\r\n      // If the scroll position is beyond the navbar, make it sticky\r\n      navbar = document.querySelector('.links');\r\n      // Don't set navPosition to 0\r\n      navPosition = navbar.offsetTop === 0 ? navPosition : navbar.offsetTop;\r\n      window.pageYOffset >= navPosition ?\r\n        navbar.classList.add('sticky') : navbar.classList.remove('sticky');\r\n    };\r\n  }, []); // only componentDidMount()\r\n\r\n  const setSlider = dest => {\r\n    // Check where to slide the components\r\n    if (window.location.pathname === '/contact') {\r\n      // At Contact, always slide right\r\n      setSlideDirection('right');\r\n    } else if (window.location.pathname === '/projects') {\r\n      // At Projects, check which link was clicked\r\n      if (dest === 'about') {\r\n        setSlideDirection('right');\r\n      } else {\r\n        setSlideDirection('left');\r\n      }\r\n    } else {\r\n      // At About, always slide left (default)\r\n      setSlideDirection('left');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"heading container-fluid\">\r\n        <h1 className=\"heading-name\" tabIndex={0}>Abhishek Chaudhuri</h1>\r\n        {/* Add tabIndex to important information */}\r\n        <h2 className=\"heading-headline\" tabIndex={0}>\r\n          Computer Engineering & Science Student at Rutgers University - New Brunswick\r\n        </h2>\r\n      </header>\r\n      <nav className=\"links container-fluid\">\r\n        {/* Redirect routes without reloading the browser */}\r\n        <Link className=\"links-about\" to=\"/about\"\r\n          onClick={() => setSlider('about')}>About</Link>\r\n        <Link className=\"links-projects\" to=\"/projects\"\r\n          onClick={() => setSlider('projects')}>Projects</Link>\r\n        <Link className=\"links-contact\" to=\"/contact\"\r\n          onClick={() => setSlider('contact')}>Contact</Link>\r\n      </nav>\r\n      <hr/>\r\n      <TransitionGroup className={`transition-group ${slideDirection}`}>\r\n        <CSSTransition key={location.key} timeout={{ enter: 600, exit: 600 }}\r\n          classNames={'slide'}>\r\n          <Switch location={location}>\r\n            {/* Ensure route works with any website url */}\r\n            <Route exact path={`${process.env.PUBLIC_URL}/`} render={() => (\r\n              /* Default page */\r\n              <main className=\"home container-fluid\">\r\n                <p className=\"home-info\" tabIndex={0}>\r\n                  Hello and welcome to my website!\r\n                  Please click the links above to learn more about me.\r\n                </p>\r\n              </main>\r\n            )}/>\r\n            <Route path={`${process.env.PUBLIC_URL}/about`} render={() => (\r\n              <About onClickLink={setSlider}/>\r\n            )}/>\r\n            <Route path={`${process.env.PUBLIC_URL}/projects`} render={() => (\r\n              <Projects onClickLink={setSlider}/>\r\n            )}/>\r\n            <Route path={`${process.env.PUBLIC_URL}/contact`} render={() => (\r\n              <Contact onClickLink={setSlider}/>\r\n            )}/>\r\n          </Switch>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n      {/* Ignore paths that take you to other repos, otherwise redirect to error page */}\r\n      {window.location.pathname !== '/' && window.location.pathname !== '/about' &&\r\n        window.location.pathname !== '/projects' && window.location.pathname !== '/contact' &&\r\n        window.location.pathname !== '/Memory-Game' &&\r\n        window.location.pathname !== '/frontend-nanodegree-arcade-game' &&\r\n        window.location.pathname !== '/Neighborhood-Map' && <Route render={() => (\r\n        <main className=\"error\">\r\n          <p className=\"error-message text-danger\" tabIndex={0}>\r\n            Whoops! That path is invalid. Please click the links above.\r\n          </p>\r\n        </main>\r\n      )}/>}\r\n      <hr/>\r\n      <footer className=\"foot container-fluid\">\r\n        <span className=\"foot-left\">\r\n          Made using <a className=\"foot-react\" href=\"https://reactjs.org/\" target=\"_blank\"\r\n            rel=\"noopener noreferrer\">React</a>\r\n          <img className=\"foot-react-img\" src=\"/img/logo.svg\" alt=\"React logo (an atom)\"/>\r\n        </span>\r\n        <span className=\"foot-right\">\r\n          <a className=\"foot-mit\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n            href=\"https://github.com/Abhiek187/abhiek187.github.io/blob/dev/LICENSE\">\r\n            MIT License</a> Copyright &copy; 2019 Abhishek Chaudhuri\r\n        </span>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  match: PropTypes.object.isRequired,\r\n  location: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withRouter(App); // Get access to match, location, and history\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // Enable react router and work in GitHub Pages\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}